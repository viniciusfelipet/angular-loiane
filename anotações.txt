- ANGULAR (ARQUITETURA):

- Modulo/Module -> Component + HTML -> Service ...

HTML (view): representa os dados que estão no COMPONENT (controller), que por sua vez pegas os dados retornados do SERVICE, responsável por fazer a comunicação e requisições com o servidor.

COMPONENT (controller):  é simplesmente a Controller da View. Sim, a view é o HTML mesmo. É no component que nós cuidamos do que é necessário para trazer funcionalidade para as views, usando o Typescript para escrever o código. Por exemplo, é no component que nós usamos uma service para tazer valores e então passamos esses valores para alguma variável, para então poder exibí-la na view.
	- Dentro do component nós usamos um decorator chamado @Component para então declarar nossa View, o estilo(CSS,SASS e etc) e um seletor(nome do componente, que poderá ser chamado em outras views)
	
SERVICE: Responsável por fazer a comunicação e requisições com o servidor, operações CRUD, operações lógicas referente a regra de negócio e classes utilitárias (utils). Todos eles fornecem as informações obtidas para o component mostrar na view.

Modulo/Module: diferente dos components não controlam nenhuma view(html). Um Module se constitui de um ou mais components, ou seja, é lá que você registra seus components. Uma aplicação Angular tem de ter no mínimo um Module que contenha mínimo um Component. Além de registrar components, outras responsabilidades do Module são declarar qual ou quais components podem ser usados por components que são de outros Modules, quais services serão injetados e qual componente será o componente inicial. Os Modules gerenciam os components e é com eles que nós podemos modularizar nossa aplicação.

Resumindo: É como se o Module fosse um cômodo e os Components os móveis que preenchem aquele cômodo.

--------------------------------------------------------------------
--------------------------------------------------------------------
- ANGULAR (CONCEITOS):

@Input - passar informações do html para o component / recebe um valor do componente pai para o componente filho
@Output - utilizado para expor um evento ou expor um valor
Interface - é inserido apenas as assinaturas doq será implantado na classe (ex: metodo sem argumento)
Classe - pode ser inserido metodos com corpo
Metodos 'static': quando um método é static, você tem uma instância para cada chamada a ele, com isso, não precisamos instaciar a classe no component, diferente dos services.

--------------------------------------------------------------------
--------------------------------------------------------------------
- DATA BINDING:

<TEMPLATE HTML>	<--{{valor}}--------------------- <COMPONENT> Property Binding com Interpolação
<TEMPLATE HTML> <--[propriedade]="valor"--------- <COMPONENT> Property Binding com Class/Style (utilizado quando quer referenciar um metodo, uma variavel local ou uma expressão)
<TEMPLATE HTML> ---(evento)="metodo()"------------> <COMPONENT> Event Data Binding
<TEMPLATE HTML> <---[(ngModel)]="propriedade"---> <COMPONENT> Two Way Data Binding

--------------------------------------------------------------------
--------------------------------------------------------------------
- FORMS:

Template Driven vs Data Driven (Reativo)

-> Template Driven (toda a lógica fica no HTML - orientado a template):
	- Formulário é criado e configurado no HTML
	- Angular cria/deduz um FormGroup a partir do HTML
	- Validações são feitas no template HTML
	- Valores do form PRECISAM ser submetido com ngSubmit

-> CONCEITOS IMPORTANTES:

- FormControl: Item de formulário individual, mantém status e regras de validação.
- FormGroup: Coleções de FormControl, mantém status para coleta de formControl.
- FormArray: Matriz de FormControls.1

- Controles para formulário (todos pertencem ao FormsModule !importar no module.ts!):
* ngForm = Solicita ao Angular, ajuda para gerenciar o fomulário e já cria uma FormGroup no HTML
* (ngSubmit) = É um event que realiza a submissão dos dados do formulário (obs: adicionar button com o type "submit")
* ngModel = Realiza a associação de cada input do html à um campo de valor do formulário


- Estados:
* Controle visitado - ng-touched (SIM) ou ng-untouched (NÃO)
* Valor mudou - ng-dirty (SIM) ou ng-pristine (NÃO)
* Controle válido - ng-valid (SIM) ou ng-invalid (NÃO)

-------
	
-> Data Driven (Formulário Reativo - orientado a dados):
	- Formulário é criado e configurado no COMPONENTE, e é sincronizado com o DOM/HTML
	- Validações são feitas no COMPONENTE
	- Angular usa o FormGroup criado no COMPONENTE
	- Form já está no COMPONENTE e NÃO precisa do ngSubmit

-> CONCEITOS IMPORTANTES:

- Sempre importar o 'ReactiveFormsModule' no module quando for utiliar o data-driven (formulário reativo)
- FormGroup representa todo o formulário
- FormBuilder é o construtor de formulários
- Não é utilizado variaveis locais no HTML, diferente do template-driven. Sendo assim, na maioria das vezes, o HTML utilizará property binding
- [ngValue] vs [value] no <option> para os <select>: 'ngValue' é usado quando estamos mexendo/comparando com o objeto inteiro, já o 'value' é para quando estamos mexendo/comparando um atribuito simples (ex: [value]="tecnologias.nome")

--------------------------------------------------------------------
--------------------------------------------------------------------
- PIPES

Utilizado para transformar um valor dentro do template (Ex: data formatada, números, objeto para json e etc)

-> Parâmetros:
- São utilizados em alguns pipes.
- Podem ser passados após o nome do pipe (ex: livro.notaAvaliação | number:'<nº_de_inteiros>.<nº_de_decimais>')

-> PIPES DO ANGULAR (https://angular.io/api?type=pipe):
1. uppercase: transforma toda a string em maiusculo;
2. number: manipula os números como a quantidade de casa decimais, cada de inteiros e etc
3. currency (moeda): converte um número e no padrão de moeda 
4. date: formata os valores em data.
5. json: formata um objeto para json (é mais utilizado para debug)
6. async: utilizado para renderizar valor de formar assíncrona (consulta com o servidor que pode "demorar")

--------------------------------------------------------------------
--------------------------------------------------------------------
- DIRETIVAS:

1. HostListener - escuta um evento feito pela tag que está utilizado essa diretiva no html e dispara o metodo com o mouse em cima do texto
2. HostBinding - Permite fazer o binding (associação) de um atributo ou classe para uma variavel
